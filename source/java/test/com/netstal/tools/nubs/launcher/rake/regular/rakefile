require '../patch'

Rake.application.options.trace = true

def useTime()
	$stdout.flush
	sleep(2)
end

# -----------------------------------------------------------------------

task :ProjectOne_generate
task :ProjectOne_build_ipc_only do 
	puts "Doing the work of ProjectOne_build_ipc_only"
end
task :ProjectOne => [:ProjectOne_generate,:ProjectOne_build_ipc_only]

# -----------------------------------------------------------------------

task :default => [:ProjectOne]

task :ProjectTwo_generate
task :ProjectTwo_build_ipc_only  do 
	puts "Doing the work of ProjectTwo_build_ipc_only"
end
task :ProjectTwo_build_dpu_only  do 
	puts "Doing the work of ProjectTwo_build_dpu_only"
end
task :ProjectTwo => [:ProjectTwo_generate,:ProjectTwo_build_ipc_only,:ProjectTwo_build_dpu_only]

task :default => [:ProjectTwo]

# -----------------------------------------------------------------------

task :Application_generate
task :Application_deploy

# -----------------------------------------------------------------------

task :Fail_build_dpu_only do
	useTime()
	puts "Just Fail ==> Problem xyz"
    $stdout.flush
	fail("Just Fail")
end

# -----------------------------------------------------------------------

task :FailFast do
	puts "Just FailFast ==> Problem xyz"
    $stdout.flush
	fail("Just Fail FailFast")
end

# -----------------------------------------------------------------------

task :TimeOne do
	useTime()	
end

task :TimeTwo => [:TimeOne]  do
	useTime()
end

task :Time => [:TimeTwo]  do
    useTime()
end

# -----------------------------------------------------------------------

failOnce_A_guard = true
task :FailOnce_A => [:TimeTwo] do
	if(failOnce_A_guard)		
		failOnce_A_guard = false
		fail("FailOnce")
	end			
end 

task :FailOnce => [:FailOnce_A] 


task :LotsOfOutput do 
  100.times do |n|
  	n.times do |j| 
  		$stdout.write j
    end
    puts
  	$stdout.flush
  	sleep(0.1)
  end 	
end

task :ShowVariableBjam do 
  puts ENV["bjam_targets"]
end

task :ShowVariableIgnore do
  puts ENV["ignore_deps"]
end
